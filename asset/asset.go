// Code generated by go-bindata. DO NOT EDIT.
// sources:
// views/404.html (1.125kB)
// views/index.html (109B)
// docs/swagger.json (2.812kB)
// docs/swagger.yaml (1.341kB)

package asset

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _views404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xdd\xae\xd3\x3c\x10\xbc\xef\x53\xec\x97\x4f\x48\x80\x9a\x36\x29\x54\x2a\x21\xa9\xb8\xe2\x12\x21\xf1\x04\xae\xbd\x4d\x56\x72\xec\xc8\xde\xfe\x04\xd4\x77\x47\xee\x69\x7b\x6a\x9f\xe0\x9b\x38\x1e\x7b\x66\x67\x9c\x4d\xfd\x9f\xb2\x92\xc7\x01\xa1\xe3\x5e\x6f\x67\x75\x78\x80\x16\xa6\x6d\x32\x34\x59\x58\x40\xa1\xb6\x33\x00\x80\xba\x47\x16\x20\x3b\xe1\x3c\x72\x93\x1d\x78\x9f\x6f\xb2\x1b\xc4\xc4\x1a\xb7\x3f\x45\x8b\xf0\xc3\x32\x7c\xb7\x07\xa3\xea\xe5\xcb\xea\xd3\x61\x23\x7a\x6c\xb2\x23\xe1\x69\xb0\x8e\x33\x90\xd6\x30\x1a\x6e\xb2\x13\x29\xee\x1a\x85\x47\x92\x98\x5f\x5f\xe6\x40\x86\x98\x84\xce\xbd\x14\x1a\x9b\xf2\x2e\xe5\x79\xbc\x93\x86\xf1\x11\xfe\x3c\xe6\x61\x68\x32\x98\x77\x48\x6d\xc7\x15\x94\x8b\xd5\xd7\x08\xed\x85\x6b\xc9\x54\x50\xbc\x2e\x5f\x1e\xb3\xab\xf7\x98\x4d\x5a\x6d\x5d\x05\xff\x6f\x36\x9b\x98\x48\x91\x1f\xb4\x18\x2b\x60\xb1\xd3\x18\x63\x7b\x6b\x38\xdf\x8b\x9e\xf4\x58\x81\x17\xc6\xe7\x1e\x1d\xed\xe3\x4d\x8f\x12\x8b\xe2\x5d\x8c\x30\x9e\x39\x17\x9a\x5a\x53\x81\x44\xc3\xe8\x62\xfc\x1a\x4f\x7a\xf0\xd5\xc5\xce\xaa\x31\x71\x11\x17\x9b\x4b\xd4\x3a\xa6\x3c\xa2\x63\x92\x42\xdf\x65\x7b\x52\x2a\x75\x75\x8f\x6e\x85\x3d\x88\x03\xdb\xc9\x04\xcb\x7f\xe4\xb7\x5e\xaf\x27\x32\xf2\xf4\x1b\xaf\x84\x13\xd8\xe9\x96\xcf\xe7\x62\xf2\xae\x86\x44\xe8\x71\xb1\x49\x6d\x4f\x81\xad\x36\xc5\x70\x9e\xe2\xfa\xd6\xa3\x22\x01\xd6\xe8\x11\xbc\x74\x88\x06\x84\x51\xf0\xbe\x17\xe7\xfc\xf9\xec\x87\x44\x33\x24\x3d\x7f\x53\xc9\x93\xe2\x97\x75\x72\xb5\x97\xf8\x13\x48\xd3\x4a\x82\x29\x17\xeb\x34\x9a\xd8\x6a\x01\xc5\xe2\x53\xba\xe5\x92\x38\xac\x97\xb7\x8e\xa9\x97\x2f\xbd\x5c\x87\xba\x43\x67\x97\x6f\x1a\xb6\x2b\xb7\xb3\x7a\xd8\xfe\xb2\xce\x8d\x73\xd8\x1d\x18\xb8\x43\x18\xc2\xae\xd1\x1e\xe0\x84\x0e\x81\xdd\x48\xa6\x05\xb6\x10\xfa\x18\x94\x45\x0f\xc6\x32\xe0\x99\x3c\x2f\xea\xe5\x10\x94\x6e\x12\xcb\xeb\x5f\xe5\x6f\x00\x00\x00\xff\xff\xaf\x7d\xa5\x09\x65\x04\x00\x00")

func views404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_views404Html,
		"views/404.html",
	)
}

func views404Html() (*asset, error) {
	bytes, err := views404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/404.html", size: 1125, mode: os.FileMode(0644), modTime: time.Unix(1658732910, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0xe0, 0xd8, 0x8, 0xf6, 0x6d, 0xae, 0x42, 0x44, 0x15, 0x59, 0x14, 0xd5, 0x9e, 0xdc, 0xd6, 0xf0, 0xb3, 0x56, 0xc0, 0x2a, 0x73, 0xf6, 0xa, 0xdb, 0xa3, 0xce, 0x16, 0x28, 0x17, 0x5d, 0x2}}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\x51\xc8\x49\xcc\x4b\xb7\x55\x4a\xcd\x53\xb2\xe3\xb2\xc9\x48\x4d\x4c\xb1\xe3\x52\x50\x50\x50\xb0\x29\xc9\x2c\xc9\x49\xb5\x0b\x4e\xcc\x4d\x2c\x2a\xf1\xa9\x2c\x55\x28\x4f\x4d\xb2\xd1\x87\x08\x72\xd9\xe8\x43\x14\xda\x24\xe5\xa7\x54\x82\xb4\x19\xda\x55\x57\xeb\xe5\xa6\x16\x17\x27\xa6\xa7\xd6\xd6\xda\xe8\x67\x18\x82\x14\x41\x65\xf5\x41\xd6\xd8\x01\x02\x00\x00\xff\xff\x95\x7c\x51\x23\x6d\x00\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 109, mode: os.FileMode(0644), modTime: time.Unix(1726041394, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x13, 0xf6, 0x86, 0xb6, 0x8, 0x58, 0xa3, 0x4e, 0xb5, 0xca, 0xaa, 0xcd, 0x4a, 0xd, 0x25, 0xe9, 0x99, 0xf5, 0xf5, 0x5e, 0xb4, 0x4e, 0x41, 0xb, 0x18, 0xc7, 0xe3, 0x55, 0xeb, 0xab, 0xe9}}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4f\x6b\xd4\x40\x14\xbf\xf7\x53\x84\xd1\x63\xdd\xec\x16\x8b\xb0\x27\x17\xdb\x43\x51\x41\xec\x51\x8a\xcc\x4e\xde\x26\x53\x93\x79\xe3\xfc\xb1\x44\xd9\x83\x56\xc4\x8b\xd2\x8b\x60\xa1\xbd\xf5\x20\x82\x7a\x10\xa4\xa0\x7e\x1b\xb7\xad\xdf\x42\x92\xdd\xad\x9b\x4c\xb2\x66\xa5\x87\xe6\x96\x37\xbf\xf7\x7b\x7f\x7e\x33\xf3\xe6\xd9\x92\xe7\x79\x1e\xd1\x3b\x34\x0c\x41\x91\xae\x47\x56\x5a\x6d\xb2\x3c\xb6\x72\x31\x40\xd2\xf5\xc6\x98\xdc\x12\x80\x66\x8a\x4b\xc3\x51\x64\xd8\xcd\x84\x2a\x73\x27\xb5\x5e\x88\xd7\x18\x2a\xf0\x7a\xf7\x36\x26\xce\x39\xdc\x70\x13\x43\x0e\x1c\xf3\x7b\xff\x72\x60\x28\x0c\x65\xa6\x10\x34\x5f\x10\x34\x81\xca\x88\x9b\x56\x4a\x54\x66\x86\x24\xc7\x5b\x15\x67\xf0\xc8\x18\xa9\xbb\xbe\x1f\x72\x13\xd9\x7e\x8b\x61\xe2\x4f\x19\xfc\x09\x83\xdf\x8f\xb1\xef\x27\x94\x0b\xff\xfe\x7a\x6f\xed\xee\x7a\x2b\x09\xca\x6c\x90\x50\x9e\xf3\xc5\x36\xb5\x9d\xd5\x4e\xa7\xd3\xb9\x19\x66\xb6\x8c\x91\x9c\x63\x87\x33\x95\x3c\x01\xa5\x27\x5d\xea\xb4\xda\xad\xf6\x18\x35\x41\x10\x49\x4d\xa4\x8b\xad\xf5\xa9\x35\x11\x08\xc3\x19\x35\xe0\x36\x40\xa2\x76\xdb\x32\xd6\x0e\x98\x55\xdc\xa4\xa4\xeb\x3d\x70\x56\xb3\xcf\xf5\x39\xf7\xed\x49\x7e\x1b\xd2\x9e\x35\x51\xe6\xbd\x55\x09\x1c\x3a\xd6\xad\x65\x37\x8b\xd2\xce\x38\xdd\xff\x3e\xfa\xf9\xee\xec\xf3\xd1\xd9\x97\xe7\xa4\x02\xce\x50\x68\x9b\x80\xae\x4d\x9a\x50\x29\xe3\xac\x17\x1c\x85\xbf\xad\x51\x90\x46\x69\x48\x85\x81\x65\x17\xcf\x6b\x68\x38\x87\x33\xc6\x90\x37\x24\xd2\x36\x49\xa8\x4a\x9b\xf4\x48\x52\x45\x13\x30\xa0\xea\x23\xcf\x91\xb6\x24\x48\x8f\x31\xb4\xc2\x78\x1b\xd9\x99\x76\x83\x9d\xbb\x4d\x0f\x5a\x1f\x83\x74\x1e\x8e\x8b\x26\x28\x05\x8f\x2d\x57\x10\x90\xae\x67\x94\x85\x39\x48\xcd\x22\x48\x68\xe5\x0e\x2f\xe0\xae\x2a\x18\x64\x91\xaf\xf8\x01\x0c\xb8\xe0\x59\x7d\xda\xa7\x92\xb7\x7a\x33\xe7\xe7\x16\x8a\x01\x0f\x5d\x45\xa6\x9f\xbb\xa7\xab\xad\x55\x0a\x2a\xd0\x12\x85\x06\x5d\x9b\x2c\x59\x69\xb7\xe7\x56\x52\x16\x07\x1f\xcd\x6b\x62\xd3\xd6\x98\x54\xe6\xd2\x69\xa3\xb8\x58\xbc\xf8\xea\x0c\xc8\xf5\x76\x67\xa1\x5a\x4e\x0e\x3e\x9e\xbc\x7d\x7d\x72\xb8\x7b\x99\x4b\xba\xb1\x58\x49\x87\xbb\xbf\xf7\xf7\x7e\x1d\xbf\x39\xfb\xf6\xf5\xf2\x56\xb5\xba\xa0\x50\xa3\xa3\x97\xa7\x7b\xaf\x46\x9f\xde\x8f\x0e\x3e\x8c\x7e\xbc\x18\x1d\x1f\x5f\x82\xda\x1c\x6b\xd1\xf2\xf7\x6f\x58\x98\xa7\x33\x77\x41\x71\xaa\xd6\x5c\x0c\xce\x78\x9d\xa6\x8d\xfd\x6d\x60\xce\x6b\x42\x2a\x94\xa0\x0c\xaf\x39\xf3\x24\x44\x0c\x63\x78\xc8\x30\x70\x27\x77\xe3\xce\x54\xe8\x4a\x24\xd5\x7a\x07\x55\x70\xb1\xac\x56\x83\x9a\xdc\xf3\xff\xcb\xda\x48\x95\xe9\xcb\x64\xad\x4e\x9d\xc2\xf3\xa3\x46\x11\x9a\x63\xca\x8a\x4c\xc7\x54\xe6\x8b\x8a\x3f\xcd\xe7\x79\x19\x34\x9e\x51\x11\xd0\x00\x14\x29\xe7\xb8\x34\xfc\x13\x00\x00\xff\xff\x0a\xe1\xb9\x7b\xfc\x0a\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 2812, mode: os.FileMode(0644), modTime: time.Unix(1726042363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xcd, 0x51, 0xa3, 0x7d, 0xef, 0x5f, 0x5f, 0xda, 0xd0, 0xbd, 0x2f, 0x53, 0xf5, 0xa1, 0xc4, 0xba, 0x80, 0x26, 0xd3, 0xc2, 0x9c, 0xf8, 0x30, 0x1, 0xed, 0xb5, 0x49, 0x7f, 0x8b, 0x10, 0xcb}}
	return a, nil
}

var _docsSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6b\x14\x4d\x10\xbd\xcf\xaf\x28\xf6\xfb\x20\xa7\xec\xec\x04\x83\x30\x27\x17\x93\x43\x50\x41\xcc\x51\x44\x7a\x7b\x6a\x67\x3b\xce\x74\xb5\xdd\xd5\x86\xf1\xa6\x11\xf1\xa2\xe4\x22\x18\x48\x6e\x39\x88\xa0\x1e\x04\x09\xa8\xff\xc6\x49\xd6\x7f\x21\x33\xbb\xb3\x3b\x8b\x9b\x45\x73\xdc\x57\xef\xbd\xaa\xa9\x57\xdb\x09\x0e\x95\x56\xac\x48\xbb\x38\x00\x10\x46\x75\xfb\x9e\x47\xa8\x59\x49\xc1\x78\x93\xf4\x50\xa5\x55\x05\xc0\x58\x32\x68\x59\xa1\x9b\xfc\x06\x48\x89\xd2\x0c\x1f\x4a\x4a\xb0\x81\x00\xb8\x30\x18\x83\x63\xab\x74\x3a\x05\x8d\x70\x6e\x9f\x6c\xb2\x92\xe4\x1d\x5a\x2d\xf2\x55\x4e\x13\x80\x06\x7b\x28\x39\x50\x7a\x48\x15\x57\x92\x66\x21\x79\x22\xc3\x5c\xa8\x2c\x86\xcc\x17\x3e\xda\x8c\xa2\x28\xba\x91\x56\x48\x57\x52\x5e\xd7\xeb\x06\xb0\x9b\x0b\xcb\xb7\x0b\x0f\x29\xad\x4b\xb2\x08\xbb\xde\x18\xb2\x5c\x53\xbc\xcd\x62\x18\x31\x1b\x17\x87\x61\xaa\x78\xe4\x07\x95\x3c\x6c\x44\xe1\x54\x14\x0e\x32\x1a\x84\xb9\x50\x3a\xbc\xb7\xdd\xdf\xba\xb3\xdd\xcd\x93\x00\x20\x41\x27\xad\x32\xd5\x46\x97\x34\xea\xdf\xdd\x09\x00\x58\x71\x56\x8d\xb1\x2f\xd2\x14\xed\x65\xac\x27\x68\x5d\xed\x12\x75\x7b\xdd\x5e\x60\x04\x8f\xea\xcd\x87\xa2\x15\xd0\x34\x1a\x72\xdc\xec\x4d\x92\x76\x3e\x9f\x87\xb4\x0e\xc2\x98\xac\x22\x2b\xd2\xe1\x9e\x23\x3d\x2d\x2c\x4c\x7a\x71\xf4\xad\xfc\xf1\x76\xfc\xe9\x74\xfc\xf9\xd9\x2c\x35\x2b\x72\x64\xb4\x2d\xab\x05\x4d\x5f\x4a\xf2\x9a\x61\x47\x0f\x69\x16\x9a\xd2\x31\x0c\x28\x29\x66\xc0\x64\xe5\x0b\x90\xc5\xc7\x5e\x59\x4c\x62\x60\xeb\x71\x06\x3b\x39\xc2\x5c\xcc\xf3\x07\xf8\xdf\xe2\x30\x86\xb5\xff\xc2\xd6\x99\x86\xcb\x6f\x74\xad\x99\xda\x52\xe2\xe5\x5f\x7c\xbe\x45\x67\x48\xbb\x39\x13\xa0\xb3\xd1\xeb\x75\xda\xfd\x17\x3e\x97\x1e\xb5\x2a\x7f\xce\xba\xf4\xa8\x01\x3a\xd7\x7a\xd1\xe5\x9e\xe7\xc7\x1f\xce\xdf\xbc\x3a\x3f\x39\xb8\xa2\xf5\xf5\x15\xd6\x27\x07\xbf\x8e\x0e\x7f\x9e\xbd\x1e\x7f\xfd\x72\x25\xf7\xcd\x55\x83\x97\xa7\x2f\x2e\x0e\x5f\x96\x1f\xdf\x95\xc7\xef\xcb\xef\xcf\xcb\xb3\xb3\x7f\xef\xe1\x50\x7a\xab\xb8\x98\x47\xd5\x37\xea\x16\x16\x55\xb8\x31\xdc\x7f\xd0\xd0\x7c\x9e\x0b\x5b\x2c\xbd\x51\x16\x69\x2b\xe9\x8c\x52\xa5\x83\xc6\x76\x6b\xf1\x69\x6b\x79\xd7\x82\xea\x50\x47\x28\x12\xb4\xad\x97\xa1\x2a\x93\x55\x4f\xeb\x6b\x69\xbd\x39\xa2\x16\x07\x6e\xf2\x8f\x8d\xa1\xb3\xd1\xed\x75\x82\xdf\x01\x00\x00\xff\xff\xa2\x6f\xa8\x79\x3d\x05\x00\x00")

func docsSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerYaml,
		"docs/swagger.yaml",
	)
}

func docsSwaggerYaml() (*asset, error) {
	bytes, err := docsSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.yaml", size: 1341, mode: os.FileMode(0644), modTime: time.Unix(1726042363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0xd2, 0x2f, 0xe9, 0x62, 0xa7, 0xb4, 0xb4, 0xf0, 0x1e, 0x6e, 0x20, 0x19, 0xd7, 0x72, 0xc5, 0xcb, 0xde, 0xfd, 0x5d, 0x5c, 0x93, 0xbc, 0x19, 0x47, 0xc8, 0xc4, 0x3b, 0xf0, 0xe8, 0x6, 0xd9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/404.html":    views404Html,
	"views/index.html":  viewsIndexHtml,
	"docs/swagger.json": docsSwaggerJson,
	"docs/swagger.yaml": docsSwaggerYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": {nil, map[string]*bintree{
		"swagger.json": {docsSwaggerJson, map[string]*bintree{}},
		"swagger.yaml": {docsSwaggerYaml, map[string]*bintree{}},
	}},
	"views": {nil, map[string]*bintree{
		"404.html":   {views404Html, map[string]*bintree{}},
		"index.html": {viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
